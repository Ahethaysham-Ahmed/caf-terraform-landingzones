- name: "{{level }}-{{ deployment}} - Set landingzone file_path"
  set_fact:
    destination_path: "{{resources.configuration_folders.platform.destination_base_path}}/{{resources.configuration_folders.platform.destination_relative_path}}/{{ resources['eslz_' + deployment].relative_destination_folder }}"
    mg: "{{ lookup('file', '{{ config_folder }}/eslz/{{deployment}}/archetype_config_overrides.caf.platform.yaml') | from_yaml }}"
    mg_custom: "{{ lookup('file', '{{ config_folder }}/eslz/{{deployment}}/custom_landing_zones.caf.platform.yaml') | from_yaml }}"
    level: "{{tfstate_object.level}}"
    definition_source_folder: "{{config_folder}}/eslz/{{ deployment}}"
    template_source_folder: "{{base_templates_folder}}/{{tfstate_object.template_lib_folder}}"
    verbosity: 2

- debug:
    msg: "{{destination_path}}"

- name: "{{ level }}-{{ deployment }} |  Clean-up base directory"
  shell: |
    rm -rf "{{ destination_path }}"
  when:
    - resources.platform_core_setup.enterprise_scale[deployment].clean_up_destination_folder

- name: "{{ level }}-{{ deployment }} | Creates directory structure"
  shell: mkdir -p "{{ destination_path }}/{{ item.path }}"
  with_filetree: "{{ definition_source_folder }}"
  when: item.state == 'directory'

- name: "{{ level }}-{{ deployment }} |  Tfvars"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ template_source_folder }}/*.j2"
    - "{{ template_source_folder }}/*.md"

- name: "{{ level }}-{{ deployment }} |  Lib - archetypes - built-in"
  ansible.builtin.template:
      src: "{{ template_source_folder }}/lib/{{tfstate_object.eslz_version}}/archetype_definitions/archetype_definition_template.json.j2"
      dest: "{{ destination_path }}/lib/archetype_definitions/archetype_definition_{{ mg.archetype_definitions[item].archetype_id }}.json"
      force: yes
  loop: "{{ mg.archetype_definitions.keys() }}"
  loop_control:
    loop_var: item

- name: "{{ level }}-{{ deployment }} |  Lib - archetypes - custom"
  when:
    - mg_custom.archetype_definitions is defined
  ansible.builtin.template:
      src: "{{ template_source_folder }}/lib/{{tfstate_object.eslz_version}}/archetype_definitions/custom_landing_zone_template.json.j2"
      dest: "{{ destination_path }}/lib/archetype_definitions/archetype_definition_{{ mg_custom.archetype_definitions[item].archetype_id }}.json"
      force: yes
  loop: "{{ mg_custom.archetype_definitions.keys() }}"
  loop_control:
    loop_var: item

- name: "{{ level }}-{{ deployment }} | archetypes"
  ansible.builtin.template:
      src: "{{ template_source_folder }}/lib/{{tfstate_object.eslz_version}}/{{item}}"
      dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
      force: yes
  loop: 
    - archetype_config_overrides.tfvars.j2
    - custom_landing_zones.tfvars.j2

- name: "{{ level }}-{{ deployment }} |  Lib"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ destination_path }}/{{ item.path }}"
    force: yes
  with_filetree: "{{ definition_source_folder }}"
  when: 
    - item.state == 'file' and resources.platform_core_setup.enterprise_scale[deployment].update_lib_folder

- name: "{{ level }}-{{ deployment }} |  overrides"
  when:
    - mg_custom.archetype_definitions is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ definition_source_folder }}/*.tfvars.j2"
