- name: "{{level }}-{{ deployment}} - Set landingzone file_path"
  set_fact:
    destination_path: "{{config.configuration_folders.platform.destination_base_path}}/{{config.configuration_folders.platform.destination_relative_path}}/{{ level }}/{{ deployment }}"
    mg: "{{ lookup('file', '{{ config_folder }}/eslz/archetype_config_overrides.caf.platform.yaml') | from_yaml }}"
    mg_custom: "{{ lookup('file', '{{ config_folder }}/eslz/custom_landing_zones.caf.platform.yaml') | from_yaml }}"
    level: "{{tfstate_object.level}}"
    verbosity: 2

- debug:
    msg: "{{destination_path}}"

- name: "{{ level }}-{{ deployment }} |  Clean-up base directory"
  shell: |
    rm -rf "{{ destination_path }}"
  when:
    - config.platform_core_setup.enterprise_scale.enable
    - config.platform_core_setup.enterprise_scale.clean_up_destination_folder

- name: "{{ level }}-{{ deployment }} | Creates directory structure"
  shell: mkdir -p "{{ destination_path }}/lib/{{ item.path }}"
  with_filetree: "{{ base_templates_folder }}/{{ tfstate_object.sub_template_folder}}/lib/{{ config.platform_core_setup.enterprise_scale.private_lib.version_to_deploy }}"
  when: item.state == 'directory'

- name: "{{ level }}-{{ deployment }} |  Tfvars"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ deployment }}/*.j2"
    - "{{ level }}/{{ deployment }}/*.md"

- name: "{{ level }}-{{ deployment }} |  Lib - archetypes - built-in"
  ansible.builtin.template:
      src: "{{ base_templates_folder }}/{{ tfstate_object.sub_template_folder}}/lib/{{ config.platform_core_setup.enterprise_scale.private_lib.version_to_deploy }}/archetype_definitions/archetype_definition_template.json.j2"
      dest: "{{ destination_path }}/lib/archetype_definitions/archetype_definition_{{ mg.archetype_definitions[item].archetype_id }}.json"
      force: yes
  loop: "{{ mg.archetype_definitions.keys() }}"
  loop_control:
    loop_var: item

- name: "{{ level }}-{{ deployment }} |  Lib - archetypes - custom"
  when:
    - mg_custom.archetype_definitions is defined
  ansible.builtin.template:
      src: "{{ base_templates_folder }}/{{ tfstate_object.sub_template_folder }}/lib/{{ config.platform_core_setup.enterprise_scale.private_lib.version_to_deploy }}/archetype_definitions/custom_landing_zone_template.json.j2"
      dest: "{{ destination_path }}/lib/archetype_definitions/archetype_definition_{{ mg_custom.archetype_definitions[item].archetype_id }}.json"
      force: yes
  loop: "{{ mg_custom.archetype_definitions.keys() }}"
  loop_control:
    loop_var: item

- name: "{{ level }}-{{ deployment }} |  Lib"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ destination_path }}/lib/{{ item.path }}"
    force: yes
  with_filetree: "{{ config_folder }}/eslz/lib"
  when: item.state == 'file' and config.platform_core_setup.enterprise_scale.update_lib_folder

- name: "{{ level }}-{{ deployment }} |  overrides"
  when:
    - mg_custom.archetype_definitions is defined
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ destination_path }}/{{ item | basename | regex_replace('.j2$', '') }}"
    force: yes
  with_fileglob:
    - "{{ level }}/{{ deployment }}/lib/{{ config.platform_core_setup.enterprise_scale.private_lib.version_to_deploy }}/*.tfvars.j2"
