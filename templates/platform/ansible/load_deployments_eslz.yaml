
- name: "{{destination_eslz_path}} - Set tfstate_object"
  set_fact:
    tfstate_object: "{{topologies['eslz_' + service].tfstate}}"

- name: "{{destination_path}}/{{stage}} - Set landingzone file_path"
  set_fact:
    destination_eslz_path: "{{destination_path}}/{{stage}}/{{service}}"
    template_folder: "{{config_folder_platform_templates}}/{{ tfstate_object.template_lib_folder}}"

- name: "{{destination_eslz_path}} - Set landingzone file_path"
  set_fact:
    template_lib_folder: "{{template_folder}}/lib/{{ tfstate_object.eslz_version }}"

- name: "{{destination_eslz_path}} - Set landingzone file_path"
  set_fact:
    mg: "{{ lookup('template', '{{ template_lib_folder }}/archetype_config_overrides.caf.platform.yaml') | from_yaml }}"
    mg_custom: "{{ lookup('template', '{{ template_lib_folder }}/custom_landing_zones.caf.platform.yaml') | from_yaml  }}"

- debug:
    msg: "{{destination_eslz_path}}"

- name: "Clean-up destination directory"
  shell: |
    rm -rf "{{ destination_eslz_path }}"
  when:
    - topology.enterprise_scale[service].clean_up_destination_folder

- name: "Creates directory structure - {{template_lib_folder}}"
  shell: mkdir -p "{{ destination_eslz_path }}/lib/{{ item.path }}"
  with_filetree: "{{ template_lib_folder }}"
  when: 
    - item.state == 'directory'

- name: "  Lib"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ destination_eslz_path }}/lib/{{ item.path }}"
    force: yes
  with_filetree: "{{ template_lib_folder }}"
  when: 
    - item.state == 'file'
    - item.path is not search(".j2")
    - item.path is not search(".yaml") or item.path is search(".json") or item.path is search(".md")
    - topologies.platform_core_setup.enterprise_scale[service].update_lib_folder


- name: "  Lib"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ destination_eslz_path }}/{{ item.path }}"
    force: yes
  with_filetree: "{{ template_lib_folder }}"
  when: 
    - item.state == 'file'
    - item.path is search(".yaml")
    - topologies.platform_core_setup.enterprise_scale[service].update_lib_folder
