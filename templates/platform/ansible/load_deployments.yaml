
- name: "Process 1 deployment file {{stage}}"
  set_fact:
    "{{stage}}_{{item}}_deployment__to_merge": "{{ lookup('template', '{{ config_folder_platform_templates + \"/services/\" + topology.deployments[stage][item]}}') | from_yaml }}"
  loop: "{{topology.deployments[stage].keys()}}"
  when: 
    - stage == 'root' or stage == 'eslz'
    - topologies is not defined

- name: "Copy file {{stage}} from {{config_folder_platform_templates}}/services/"
  ansible.builtin.template:
    src: "{{config_folder_platform_templates}}/services/{{topology.deployments[stage][item]}}"
    dest: "{{destination_path}}/{{topologies[item].tfstate.config_file}}"  
  loop: "{{topology.deployments[stage].keys()}}"
  when: 
    - stage == 'root'
    - topologies is defined

- name: "Copy file {{stage}} from {{config_folder_platform_templates}}/services/"
  ansible.builtin.template:
    src: "{{config_folder_platform_templates}}/services/{{topology.deployments[stage][item]}}"
    dest: "{{destination_path}}/{{topologies[stage + '_' + item].tfstate.config_file}}"  
  loop: "{{topology.deployments[stage].keys()}}"
  when: 
    - stage == 'eslz'
    - topologies is defined


- name: "Process 2 deployment file {{stage}}"
  include_tasks: "load_deployments_eslz.yaml"
  loop: "{{topology.deployments[stage].keys()}}"
  loop_control:
    loop_var: service
  when: 
    - stage == 'eslz'
    - topologies is defined

- name: "Process 2 deployment file {{stage}}"
  include_tasks: "load_deployments_env.yaml"
  loop: "{{topology.deployments[stage].keys()}}"
  loop_control:
    loop_var: service
  when: 
    - stage == 'scale_out_domains'
