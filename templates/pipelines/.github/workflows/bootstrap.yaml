#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name: bootstrap

on:
  push:
    branches:
      - bootstrap

permissions:
  id-token: write
  contents: read

concurrency: 
{% raw %}
  group: ${{ github.ref }}
{% endraw %}
  
env:
  LZ_REPO: '{{resources.terraform_code_repository}}'
  LZ_BRANCH: '{{resources.caf_landingzone_branch}}'
  CAF_ENVIRONMENT: {{resources.caf_environment}}

jobs:

  environment:
    name: Setup dynamic environment variables
    runs-on: ubuntu-latest
    outputs:
{% raw %}
      terraform_code_repository: ${{ steps.set_env.outputs.terraform_code_repository }}
      terraform_code_ref: ${{ steps.set_env.outputs.terraform_code_ref }}
      environment: ${{ steps.set_env.outputs.environment }}
{% endraw %}
    steps:
      - name: Set environment variables for re-usable workflows
        id: set_env
        run: |
          echo "::set-output name=terraform_code_repository::$LZ_REPO"
          echo "::set-output name=terraform_code_ref::$LZ_BRANCH"
          echo "::set-output name=environment::$CAF_ENVIRONMENT"


  configuration_updates:
    name: Generate configuration tfvars files
    runs-on: [self-hosted, platform]

    permissions:
      id-token: write
      contents: write
      
    needs: [environment]
    uses: ./.github/workflows/generate-config.yaml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      RUNNER_REGISTRATION_TOKEN: ${{ secrets.RUNNER_REGISTRATION_TOKEN }}
      RUNNER_NUMBERS: ${{ secrets.RUNNER_NUMBERS }}
      AZURE_OBJECT_ID: ${{ secrets.AZURE_OBJECT_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}


  launchpad:
    uses: ./.github/workflows/rover.yaml
    needs: [environment, configuration_updates]
    concurrency: 
      group: level0-launchpad
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}
      caf_identity_aad_key: cred_level0
      landingzone_code_path: ./landingzones/caf_launchpad
      landingzone_configuration_path: ./platform/configuration/level0/launchpad
      plan_path: ${GITHUB_WORKSPACE}/caf_launchpad.tfstate.tfplan
      tfstate: caf_launchpad.tfstate
      level: level0
      terraform_action: plan_apply

  credentials:
    uses: ./.github/workflows/rover.yaml
    needs: [environment, launchpad]
    concurrency: 
      group: level0-credentials
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}
      caf_identity_aad_key: cred_identity
      landingzone_code_path: ./landingzones/caf_solution
      landingzone_configuration_path: ./platform/configuration/level0/credentials
      plan_path: ${GITHUB_WORKSPACE}/launchpad_credentials.tfstate.tfplan
      tfstate: launchpad_credentials.tfstate
      level: level0
      terraform_action: plan_apply



  trigger_end2end:
    name: Create pull request for end2end 
    runs-on: ubuntu-latest
    needs: [credentials]

    steps:
      - name: Create configuration files
        run: |
          git checkout -b end2end --track origin/bootstrap
          git add .
          pre-commit
          git commit -am "Update definition files."
              # Create the initial PR for the bootstrap configuration
          body="Trigger end2end deployment."

          /usr/bin/gh pr create \
            --assignee "@me" \
            --title "Complete the deployment of the platform services." \
            --body "${body}" \
            --base bootstrap \
            -R (echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" || echo "git config --get remote.origin.url" | sed -e 's#^https://github.com/##; s#^git@github.com:##; s#.git$##')
        
          git push