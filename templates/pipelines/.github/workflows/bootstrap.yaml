#
# Copyright (c) Microsoft Corporation
# Licensed under the MIT License.
#

name: bootstrap

on:
  push:
    branches:
      - bootstrap

permissions:
  id-token: write
  contents: read

concurrency: 
{% raw %}
  group: ${{ github.ref }}
{% endraw %}
  
env:
  LZ_REPO: '{{resources.terraform_code_repository}}'
  LZ_BRANCH: '{{resources.caf_landingzone_branch}}'
  CAF_ENVIRONMENT: {{resources.caf_environment}}

jobs:

  environment:
    name: Setup dynamic environment variables
    runs-on: ubuntu-latest
    outputs:
{% raw %}
      terraform_code_repository: ${{ steps.set_env.outputs.terraform_code_repository }}
      terraform_code_ref: ${{ steps.set_env.outputs.terraform_code_ref }}
      environment: ${{ steps.set_env.outputs.environment }}
{% endraw %}
    steps:
      - name: Set environment variables for re-usable workflows
        id: set_env
        run: |
          echo "::set-output name=terraform_code_repository::$LZ_REPO"
          echo "::set-output name=terraform_code_ref::$LZ_BRANCH"
          echo "::set-output name=environment::$CAF_ENVIRONMENT"


  configuration_updates:
    name: Generate configuration files
    runs-on: ubuntu-latest

    container:
      image: {{resources.default_rover_image}}
      options: --user 0


    permissions:
      id-token: write
      contents: write

    steps:

      - name: 'Azure Login'
        uses: azure/login@v1
        with: {% raw %}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
{% endraw %}
      
      - name: Checkout Configuration
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
{% raw %}
          ref: ${{ github.event.pull_request.head.ref }}
{% endraw %}

      - name: Create configuration files
        run: |
{% raw %}
          # az login --use-device-code --tenant ${{ secrets.AZURE_TENANT_ID }} >/dev/null >&1
          az account set -s ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
{% endraw %}

          rm -rf ./landingzones
          git clone -b $LZ_BRANCH --single-branch $LZ_REPO ./landingzones
          
          cred_vault_name=$(az keyvault list --query "[?(tags.caf_identity_aad_key=='cred_level0' && tags.caf_environment=='$CAF_ENVIRONMENT')].{name:name}[0]" -o tsv)
          if [ "${cred_vault_name}" != ''  ]; then
            sp_keyvault_url="https://${cred_vault_name}.vault.azure.net/"
            
            # Test permissions
            az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv  --only-show-errors | read CLIENT_ID

            if [ ! -z "${tenant}" ]; then
                export ARM_TENANT_ID=${tenant}
            else
                export ARM_TENANT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-tenant-id --query 'value' -o tsv --only-show-errors)
            fi

            export ARM_CLIENT_ID=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-id --query 'value' -o tsv --only-show-errors)
            export ARM_CLIENT_SECRET=$(az keyvault secret show --id ${sp_keyvault_url}/secrets/sp-client-secret --query 'value' -o tsv --only-show-errors)

            az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} -t ${ARM_TENANT_ID}  --only-show-errors 1> /dev/null
          fi


{% raw %}
          ansible-playbook $(readlink -f ./landingzones/templates/ansible/ansible.yaml) \
            --extra-vars "@$(readlink -f ./platform/definition/ignite.yaml)" \
            -e AGENT_TOKEN=${{ secrets.RUNNER_REGISTRATION_TOKEN }} \
            -e RUNNER_NUMBERS=${{ secrets.RUNNER_NUMBERS }} \
            -e ROVER_AGENT_DOCKER_IMAGE={{gitops_default_rover_image}} \
            -e AZURE_OBJECT_ID=${{ secrets.AZURE_OBJECT_ID }} \
            -e GITHUB_SERVER_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} \
            -e base_folder=$(pwd)
{% endraw %}


          git config --global --add safe.directory $(pwd)

          git remote -v
          
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions@github.com"

          echo ${GITHUB_HEAD_REF}
          
          if [ -z "$(git status --porcelain)" ];
          then
              echo "Nothing to commit"
          else
            git add --all .
            git commit -m "Update configuration files"
            git push
          fi

  launchpad:
    uses: ./.github/workflows/rover-hosted.yaml
    needs: [environment, configuration_updates]
    concurrency: 
      group: launchpad
    secrets:
{% raw %}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}
      caf_identity_aad_key: cred_level0
      landingzone_code_path: ./landingzones/caf_launchpad
      landingzone_configuration_path: ./platform/configuration/level0/launchpad
      plan_path: ${GITHUB_WORKSPACE}/caf_launchpad.tfstate.tfplan
      tfstate: caf_launchpad.tfstate
      level: level0
      terraform_action: plan_apply
{% endraw %}

  credentials:
    uses: ./.github/workflows/rover-hosted.yaml
    needs: [environment, launchpad]
    concurrency: 
      group: credentials
    secrets:
{% raw %}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}
      landingzone_code_path: ./landingzones/caf_solution
      landingzone_configuration_path: ./platform/configuration/level0/credentials
      plan_path: ${GITHUB_WORKSPACE}/launchpad_credentials.tfstate.tfplan
      tfstate: launchpad_credentials.tfstate
      level: level0
      terraform_action: plan_apply
{% endraw %}

  gitops-runners:
    uses: ./.github/workflows/rover-hosted.yaml
    needs: [environment, launchpad]
    concurrency: 
      group: gitops-runners
    secrets:
{% raw %}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_LAUNCHPAD_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
      AZURE_TARGET_SUBSCRIPTION_ID: ${{ secrets.AZURE_LAUNCHPAD_SUBSCRIPTION_ID }}
    with:
      terraform_code_ref: ${{ needs.environment.outputs.terraform_code_ref }}
      terraform_code_repository: ${{ needs.environment.outputs.terraform_code_repository }}
      environment: ${{ needs.environment.outputs.environment }}
      landingzone_code_path: ./landingzones/caf_solution
      landingzone_configuration_path: ./platform/configuration/level0/gitops_agents
      plan_path: ${GITHUB_WORKSPACE}/gitops_agents.tfstate.tfplan
      tfstate: gitops_agents.tfstate
      level: level0
      terraform_action: plan_apply
{% endraw %}


  trigger_end2end:
    name: Create pull request for end2end 
    runs-on: ubuntu-latest
    needs: [credentials, gitops-runners]

    steps:
      - name: Create configuration files
        run: |
          git checkout -b end2end --track origin/bootstrap
          git add .
          pre-commit
          git commit -am "Update definition files."
              # Create the initial PR for the bootstrap configuration
          body="Trigger end2end deployment."

          /usr/bin/gh pr create \
            --assignee "@me" \
            --title "Complete the deployment of the platform services." \
            --body "${body}" \
            --base bootstrap \
            -R (echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" || echo "git config --get remote.origin.url" | sed -e 's#^https://github.com/##; s#^git@github.com:##; s#.git$##')
        
          git push